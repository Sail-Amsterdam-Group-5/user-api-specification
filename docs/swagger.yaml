basePath: /
definitions:
  models.ResetPasswordDTO:
    description: Reset password request data
    properties:
      email:
        example: forgetfuluser@email.com
        type: string
      id:
        example: "123"
        type: string
      password:
        example: newpassword
        type: string
    type: object
  models.UserDTO:
    description: User model
    properties:
      email:
        example: john@example.com
        type: string
      groupID:
        example: "2"
        type: string
      id:
        example: "123"
        type: string
      phone:
        example: "1234567890"
        type: string
      role:
        example: volunteer
        type: string
      username:
        example: John Doe
        type: string
    type: object
  models.UserKeycloakDTO:
    properties:
      groupID:
        example: "2"
        type: string
      id:
        example: "123"
        type: string
      roles:
        example:
        - volunteer
        items:
          type: string
        type: array
      username:
        example: John Doe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a User microservice with CRUD operations in GoLang.
  title: User Microservice API
  version: "1.0"
paths:
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user and save their information in the database
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserDTO'
      summary: Register a new user
  /resetpassword:
    post:
      consumes:
      - application/json
      description: Initiates a password reset process for a user by their email or
        ID
      parameters:
      - description: Password reset request data
        in: body
        name: resetRequest
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset initiated
          schema:
            type: string
      summary: Reset a user's password
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user to the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDTO'
      summary: Create a new user
  /user/{id}:
    delete:
      description: Delete user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Deleted successfully
          schema:
            type: string
      summary: Delete user by ID
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDTO'
      summary: Get user by ID
    put:
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDTO'
      summary: Update user by ID
  /user/keycloak/{id}:
    get:
      description: Retrieve minimal user information for Keycloak authentication purposes
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserKeycloakDTO'
      summary: Get user info for Keycloak
securityDefinitions:
  OAuth2Application:
    flow: application
    scopes:
      admin: Grants read and write access to administrative information
      keycloak: Keycloak access
      teamlead: Team lead access
      volunteer: Volunteer access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
